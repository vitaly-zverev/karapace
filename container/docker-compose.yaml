version: '3'
services:
############## Pritunl VPN ################### 
  vpn:
    image: "jippi/pritunl:latest"
    restart: unless-stopped
    privileged: true    
    ports:
      #- 80:80 # Let's encrypt check it (uncomment before push in the cloud or use sed pattern below)
      #<replace_me_with_hash> 
      - 443:443
      - 1194:1194
      - 1194:1194/udp      
      - 18453:18453/udp # default upd port of pritunl
    networks:
      - pilot_internal_net

############## PostgreSQL ################### 
  pg:  # username/password:  postgres/your_password  DB: postgres
    image: "postgres:alpine3.17"
    #ports:
    # - 5432:5432      
    environment:       
      POSTGRES_PASSWORD: "your_password"
    networks:
      - pilot_internal_net

############## Greenplum ################### 
# https://habr.com/ru/companies/leroy_merlin/articles/735970/
# https://github.com/andruche/docker-greenplum/blob/master/7/DockerFile 
#
  greenplum: # gpadmin/123456  DB: postgres
    build: ./greenplum
    #ports:
    #  - 5433:5432  
    networks:
      - pilot_internal_net

############## PG Admin ###################     
  pgadmin:  # user/password:   admin@example.com/your_password
    image: "dpage/pgadmin4"
    ports:
      - 9898:80
    environment:
      # PGADMIN_ENABLE_TLS: "True"  # If left un-set, the container will listen on port 80 for connections in plain text. 
      PGADMIN_DEFAULT_EMAIL: "admin@example.com"
      PGADMIN_DEFAULT_PASSWORD: "your_password"
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True" 
      PGADMIN_CONFIG_LOGIN_BANNER: "'Authorised IT1 users only!'"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 10     
    networks:
      - pilot_internal_net

############## NiFi ###################   
  nifi: # dynamic user/password -> look at docker-compose logs nifi | grep "Generated"
    image: "apache/nifi:latest"
    #ports:
    #  - 8443:8443
    environment:
      NIFI_WEB_HTTP_PORT: '8443'
    depends_on:
      kafka:
          condition: service_healthy
          restart: true
      karapace-registry:
          condition: service_healthy
          restart: true
    networks:
      - pilot_internal_net

############## Kafka producer (Example) ################### 
  producer:
    build: ./producer
    depends_on:
      kafka:
          condition: service_healthy
          restart: true
      karapace-registry:
          condition: service_healthy
          restart: true
    networks:
      - pilot_internal_net

    
############## Kafka schema external publisher (Example #1) ################### 
  integration_test1:
    image: "curlimages/curl"
    command: | 
         -X POST   "http://karapace-registry:8081/subjects/demo1/versions"  
         -H "Content-Type: application/vnd.schemaregistry.v1+json"  
         -d '
            {"schema": "{\"type\":\"record\",\"name\":\"sensor_sample\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},
            {\"name\":\"identifier\",\"type\":\"string\",\"logicalType\":\"uuid\"},
            {\"name\":\"value\",\"type\":\"long\"}]}"}
            '
    depends_on:
      kafka:
          condition: service_healthy
          restart: true
      karapace-registry:
          condition: service_healthy
          restart: true
    networks:
      - pilot_internal_net

############## Kafka schema external publisher (Example #2) ################### 
## https://docs.confluent.io/platform/current/schema-registry/schema_registry_onprem_tutorial.html
#          
  integration_test2:
    image: "curlimages/curl"
    command: | 
          -X POST -H "Content-Type: application/vnd.schemaregistry.v1+json" 
          --data 
          '
            {"schema": "{\"type\":\"record\",\"name\":\"Payment\",
              \"namespace\":\"io.confluent.examples.clients.basicavro\",
              \"fields\":[
                  {\"name\":\"id\",\"type\":\"string\"},
                  {\"name\":\"amount\",\"type\":\"double\"}
                  ]}
            "}
          '
          http://karapace-registry:8081/subjects/test-value/versions
    depends_on:
      kafka:
          condition: service_healthy
          restart: true
      karapace-registry:
          condition: service_healthy
          restart: true
    networks:
      - pilot_internal_net


############## Kafka Magic (Web client Example 1) ################### 
  kafka_magic:
    image: "digitsy/kafka-magic"
    #ports:
    #  - 8080:80
    volumes:
            - ./config_km:/config
    environment:
      KMAGIC_ALLOW_TOPIC_DELETE: "true"
      KMAGIC_ALLOW_SCHEMA_DELETE: "true"
      KMAGIC_CONFIG_STORE_TYPE: "file"
      KMAGIC_CONFIG_STORE_CONNECTION: "Data Source=/config/KafkaMagicConfig.db;"
      KMAGIC_CONFIG_ENCRYPTION_KEY: "P@ssw0rd"        
    depends_on:
      - kafka
      - karapace-registry
    networks:
      - pilot_internal_net

############## Redpanda console (Web client Example 2) ################### 
  redpandadata_console:
    image: "docker.redpanda.com/redpandadata/console:latest"
    #ports:
    #  - 8888:8080
    volumes:
      - ./config_rp:/config/      
    environment:
      KAFKA_BROKERS: "kafka:9092"
      CONFIG_FILEPATH: "/config/redpanda-console-config.yaml"
    depends_on:
      kafka:
          condition: service_healthy
          restart: true
      karapace-registry:
          condition: service_healthy
          restart: true    
    networks:
      - pilot_internal_net


############## Landoop console (Web client Example 3) ################### 
  schema-registry-ui:
    image: "vzverev/schema-registry-ui:v.1.0"   
    #image: landoop/schema-registry-ui
    # image: hausgold/schema-registry-ui
    #ports:
    #  - 8000:8000
    environment:
#      - SCHEMAREGISTRY_URL=http://localhost:8081
      SCHEMAREGISTRY_URL: http://karapace-registry:8081   
      ALLOW_GLOBAL: 1
      ALLOW_TRANSITIVE: 1
      ALLOW_DELETION: 1
      PROXY: yes
    depends_on:
      - karapace-registry
    networks:
      - pilot_internal_net

############## Zookeeper ###################
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    #ports:
    #  - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - pilot_internal_net

############## Kafra server ###################         
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    #ports:
    #  - "9101:9101"  # JMX
    #  - "9092:9092"  # Kafka
    healthcheck: 
        test: ["CMD", "curl", "-f", "http://karapace-registry:8081"]
        interval: 5s
        timeout: 10s
        retries: 5          
    environment:
      # Listeners:
      # PLAINTEXT_HOST -> Expose kafka to the host network
      # PLAINTEXT -> Used by kafka for inter broker communication / containers
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://karapace-registry:8081
      # Metrics:
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # Keep in sync with tests/integration/conftest.py::configure_and_start_kafka
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "local"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_INTER_BROKER_PROTOCOL_VERSION: 2.4
      KAFKA_LOG_CLEANER_ENABLE: "true"
      KAFKA_LOG_MESSAGE_FORMAT_VERSION: 2.4
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_SEGMENT_BYTES: 209715200
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_NUM_NETWORK_THREADS: 112
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_NUM_REPLICA_FETCHERS: 4
      KAFKA_NUM_RECOVERY_THREADS_PER_DATA_DIR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_NUM_PARTITIONS: 16
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 6000
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
    networks:
      - pilot_internal_net

############## Schema registry server ###################         
  karapace-registry:
    #image: ghcr.io/aiven/karapace:develop
    image: ghcr.io/aiven/karapace
    build:
      context: ..
      dockerfile: container/Dockerfile
    entrypoint:
      - /bin/bash
      - /opt/karapace/start.sh
      - registry
    depends_on:
      - kafka
    #ports:
    #  - "8081:8081"
    environment:
      KARAPACE_ADVERTISED_HOSTNAME: karapace-registry
      KARAPACE_BOOTSTRAP_URI: kafka:9092
      KARAPACE_PORT: 8081
      KARAPACE_HOST: 0.0.0.0
      KARAPACE_CLIENT_ID: karapace
      KARAPACE_GROUP_ID: karapace-registry
      KARAPACE_MASTER_ELIGIBILITY: "true"
      KARAPACE_TOPIC_NAME: _schemas
      KARAPACE_LOG_LEVEL: WARNING
      KARAPACE_COMPATIBILITY: FULL
    networks:
      - pilot_internal_net

############## Schema registry REST ###################         
  karapace-rest:
    image: ghcr.io/aiven/karapace:develop
    build:
      context: ..
      dockerfile: container/Dockerfile
    entrypoint:
      - /bin/bash
      - /opt/karapace/start.sh
      - rest
    depends_on:
      - kafka
      - karapace-registry
    #ports:
    #  - "8082:8082"
    environment:
      KARAPACE_PORT: 8082
      KARAPACE_HOST: 0.0.0.0
      KARAPACE_ADVERTISED_HOSTNAME: karapace-rest
      KARAPACE_BOOTSTRAP_URI: kafka:9092
      KARAPACE_REGISTRY_HOST: karapace-registry
      KARAPACE_REGISTRY_PORT: 8081
      KARAPACE_ADMIN_METADATA_MAX_AGE: 0
      KARAPACE_LOG_LEVEL: WARNING
    networks:
      - pilot_internal_net

############## Reverse proxy (Example 1, for exposing Landoop UI) ###################         
  nginx_landoop:
    image: "vzverev/nginx-basic-auth:v1.0"
    ports:
      - "9991:80"
    depends_on:
      - schema-registry-ui
    environment: 
      - FORWARD_HOST=schema-registry-ui
      - FORWARD_PORT=8000
      - BASIC_USERNAME=user_name
      - BASIC_PASSWORD=your_password
    networks:
      - pilot_internal_net

  nginx_km:
    image: "vzverev/nginx-basic-auth:v1.0"
    ports:
      - "9992:80"
    depends_on:
      - kafka_magic
    environment: 
      - FORWARD_HOST=kafka_magic
      - FORWARD_PORT=80
      - BASIC_USERNAME=user_name
      - BASIC_PASSWORD=your_password
    networks:
      - pilot_internal_net

  nginx_rp:
    image: "vzverev/nginx-basic-auth:v1.0"
    ports:
      - "9993:80"
    depends_on:
      - redpandadata_console
    environment: 
      - FORWARD_HOST=redpandadata_console
      - FORWARD_PORT=8080
      - BASIC_USERNAME=user_name
      - BASIC_PASSWORD=your_password
    networks:
      - pilot_internal_net

  nginx_nifi:
    image: "vzverev/nginx-basic-auth:v1.0"
    ports:
      - "9994:80"
    depends_on:
      - nifi
    environment: 
      - FORWARD_HOST=nifi
      - FORWARD_PORT=8443
      - BASIC_USERNAME=user_name
      - BASIC_PASSWORD=your_password
    networks:
      - pilot_internal_net


networks:
  pilot_internal_net:
